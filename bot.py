import telebot
from telebot import types
import time

TOKEN = "7931894873:AAHn2WYyn-Ix83qm2LPp0oaKEJIHYEIXueg"
bot = telebot.TeleBot(TOKEN)

questions = [
    {
        'text': 'üßê –ß—Ç–æ –≤–∞–º –±–ª–∏–∂–µ?',
        'options': [
            {'text': 'üõ† –†–µ—à–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏', 'weights': [2, 0, 0]},
            {'text': 'üìö –ò–∑—É—á–∞—Ç—å –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—É –∏ —è–∑—ã–∫–∏', 'weights': [0, 2, 0]},
            {'text': 'ü§ù –û–±—â–∞—Ç—å—Å—è –∏ –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º', 'weights': [0, 0, 2]},
        ]
    },
    {
        'text': 'üéØ –ö–∞–∫—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?',
        'options': [
            {'text': 'üíª –†–∞–±–æ—Ç–∞ —Å —Ç–µ—Ö–Ω–∏–∫–æ–π –∏ —Ü–∏—Ñ—Ä–∞–º–∏', 'weights': [2, 0, 0]},
            {'text': 'üé® –¢–≤–æ—Ä—á–µ—Å–∫–æ–µ —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏–µ', 'weights': [0, 2, 0]},
            {'text': 'üìã –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª—é–¥—å–º–∏', 'weights': [0, 0, 2]},
        ]
    },
    {
        'text': 'üè¢ –ö–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç?',
        'options': [
            {'text': 'üè≠ –ö–æ–º–ø–∞–Ω–∏—è', 'weights': [2, 0, 0]},
            {'text': 'üè† –§—Ä–∏–ª–∞–Ω—Å', 'weights': [0, 2, 0]},
            {'text': 'üöÄ –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –±–∏–∑–Ω–µ—Å', 'weights': [0, 0, 2]},
        ]
    },
    {
        'text': 'üìñ –ö–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç –≤ —à–∫–æ–ª–µ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?',
        'options': [
            {'text': 'üìê –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ —Ñ–∏–∑–∏–∫–∞', 'weights': [2, 0, 0]},
            {'text': 'üìú –ò—Å—Ç–æ—Ä–∏—è –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', 'weights': [0, 2, 0]},
            {'text': 'üß† –û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è', 'weights': [0, 0, 2]},
        ]
    },
    {
        'text': 'üß© –ö–∞–∫ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ —Ä–µ—à–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã?',
        'options': [
            {'text': 'üßÆ –õ–æ–≥–∏—á–µ—Å–∫–∏ –∏ —Å–∏—Å—Ç–µ–º–Ω–æ', 'weights': [2, 0, 0]},
            {'text': 'üé≠ –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏', 'weights': [0, 2, 0]},
            {'text': 'ü§ó –°–æ–≤–º–µ—Å—Ç–Ω–æ —Å –¥—Ä—É–≥–∏–º–∏ –ª—é–¥—å–º–∏', 'weights': [0, 0, 2]},
        ]
    },
    {
        'text': 'üåü –ö–∞–∫–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ —Ä–∞–±–æ—Ç—ã –≤–∞–º –±–ª–∏–∂–µ?',
        'options': [
            {'text': 'üìè –ß—ë—Ç–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞', 'weights': [2, 0, 0]},
            {'text': 'üéâ –°–≤–æ–±–æ–¥–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ –∫—Ä–µ–∞—Ç–∏–≤', 'weights': [0, 2, 0]},
            {'text': 'üë• –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞', 'weights': [0, 0, 2]},
        ]
    },
    {
        'text': 'üèÜ –ß—Ç–æ –≤—ã —Ü–µ–Ω–∏—Ç–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤ —Ä–∞–±–æ—Ç–µ?',
        'options': [
            {'text': '‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏', 'weights': [2, 0, 0]},
            {'text': 'üìñ –ö—É–ª—å—Ç—É—Ä–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ –∑–Ω–∞–Ω–∏—è', 'weights': [0, 2, 0]},
            {'text': 'üåç –í–ª–∏—è–Ω–∏–µ –Ω–∞ –æ–±—â–µ—Å—Ç–≤–æ –∏ –ø–æ–º–æ—â—å –ª—é–¥—è–º', 'weights': [0, 0, 2]},
        ]
    },
]

universities = {
    0: [("–ú–ì–¢–£ –∏–º. –ë–∞—É–º–∞–Ω–∞", "–§–∞–∫—É–ª—å—Ç–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏ –∏ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏"),
        ("–°–ü–±–ì–ü–£", "–§–∞–∫—É–ª—å—Ç–µ—Ç –ø—Ä–∏–∫–ª–∞–¥–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –∏ –º–µ—Ö–∞–Ω–∏–∫–∏"),
        ("–ù–ò–£ –í–®–≠", "–§–∞–∫—É–ª—å—Ç–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –Ω–∞—É–∫"),
        ("–ú–§–¢–ò", "–§–∞–∫—É–ª—å—Ç–µ—Ç —Ñ–∏–∑–∏–∫–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π")],
    1: [("–ú–ì–£", "–§–∞–∫—É–ª—å—Ç–µ—Ç —Ñ–∏–ª–æ–ª–æ–≥–∏–∏"),
        ("–í–®–≠", "–§–∞–∫—É–ª—å—Ç–µ—Ç –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã—Ö –Ω–∞—É–∫"),
        ("–°–ü–±–ì–£", "–§–∞–∫—É–ª—å—Ç–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏"),
        ("–†–ì–ì–£", "–§–∞–∫—É–ª—å—Ç–µ—Ç –∫—É–ª—å—Ç—É—Ä–æ–ª–æ–≥–∏–∏")],
    2: [("–†–ê–ù–•–∏–ì–°", "–§–∞–∫—É–ª—å—Ç–µ—Ç –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"),
        ("–ú–ì–ü–£", "–ü–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç"),
        ("–ú–ì–£–ü", "–§–∞–∫—É–ª—å—Ç–µ—Ç —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã"),
        ("–ú–ì–Æ–ê", "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç")],
}

university_info = {
    "–ú–ì–¢–£ –∏–º. –ë–∞—É–º–∞–Ω–∞": "–ú–ì–¢–£ –∏–º. –ë–∞—É–º–∞–Ω–∞ ‚Äî –≤–µ–¥—É—â–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –†–æ—Å—Å–∏–∏.",
    "–°–ü–±–ì–ü–£": "–°–ü–±–ì–ü–£ ‚Äî —Å–∏–ª—å–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –≤—É–∑ —Å —à–∏—Ä–æ–∫–∏–º —Å–ø–µ–∫—Ç—Ä–æ–º –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.",
    "–ù–ò–£ –í–®–≠": "–ù–ò–£ –í–®–≠ ‚Äî –æ–¥–∏–Ω –∏–∑ –ª—É—á—à–∏—Ö –≤—É–∑–æ–≤ –†–æ—Å—Å–∏–∏ —Å —Å–∏–ª—å–Ω—ã–º IT-–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º.",
    "–ú–§–¢–ò": "–ú–§–¢–ò ‚Äî –∏–∑–≤–µ—Å—Ç–µ–Ω –ø–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –≤ –æ–±–ª–∞—Å—Ç–∏ —Ñ–∏–∑–∏–∫–∏ –∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏.",
    "–ú–ì–£": "–ú–ì–£ ‚Äî –∫—Ä—É–ø–Ω–µ–π—à–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –†–æ—Å—Å–∏–∏ —Å —Å–∏–ª—å–Ω—ã–º –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–º.",
    "–í–®–≠": "–í–®–≠ ‚Äî –≤–µ–¥—É—â–∏–π –≤—É–∑ –≤ –æ–±–ª–∞—Å—Ç–∏ —ç–∫–æ–Ω–æ–º–∏–∫–∏, —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∏ –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã—Ö –Ω–∞—É–∫.",
    "–°–ü–±–ì–£": "–°–ü–±–ì–£ ‚Äî —Å—Ç–∞—Ä–µ–π—à–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –†–æ—Å—Å–∏–∏ —Å –±–æ–≥–∞—Ç—ã–º–∏ —Ç—Ä–∞–¥–∏—Ü–∏—è–º–∏.",
    "–†–ì–ì–£": "–†–ì–ì–£ ‚Äî —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã—Ö –∏ –∫—É–ª—å—Ç—É—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö.",
    "–†–ê–ù–•–∏–ì–°": "–†–ê–ù–•–∏–ì–° ‚Äî –ª–∏–¥–µ—Ä –≤ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏—Ö –∫–∞–¥—Ä–æ–≤ –¥–ª—è –≥–æ—Å—Å–ª—É–∂–±—ã.",
    "–ú–ì–ü–£": "–ú–ì–ü–£ ‚Äî –ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç —Å —Å–∏–ª—å–Ω—ã–º–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏.",
    "–ú–ì–£–ü": "–ú–ì–£–ü ‚Äî —Å–æ—Ü–∏–∞–ª—å–Ω–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—É–∑ —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ –ø–æ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ.",
    "–ú–ì–Æ–ê": "–ú–ì–Æ–ê ‚Äî –≤–µ–¥—É—â–∏–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤—É–∑ –†–æ—Å—Å–∏–∏.",
}

user_data = {}

@bot.message_handler(commands=['start', 'help'])
def start(message):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π –∏ –≤—ã–±–æ—Ä–æ–º –≤—É–∑–∞.\n\n"
        "üîπ –ù–∞–∂–º–∏ ¬´–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.\n"
        "üîπ –ù–∞–∂–º–∏ ¬´–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç¬ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n"
        "üîπ –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç —Å–Ω–æ–≤–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç¬ª.\n\n"
        "‚ÑπÔ∏è–¢–£–¢ –ú–û–ñ–ù–û –ü–û–°–ú–û–¢–†–ï–¢–¨ üëÅ‚û° <a href=\"https://studywithshaiba.tilda.ws/\">–Ω–∞—à —Å–∞–π—Ç</a>."
    )
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn_test = types.InlineKeyboardButton("üöÄ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data='start_test')
    btn_result = types.InlineKeyboardButton("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", callback_data='view_result')
    markup.add(btn_test, btn_result)
    bot.send_message(message.chat.id, text, reply_markup=markup, parse_mode='HTML')


@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = call.from_user.id

    if call.data == 'start_test':
        markup = types.InlineKeyboardMarkup(row_width=2)
        ages = ['–º–µ–Ω–µ–µ 18', '18-22', '23-30', '31+']
        for age in ages:
            btn = types.InlineKeyboardButton(age, callback_data=f'age_{age}')
            markup.add(btn)
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, "üë∂ –í—ã–±–µ—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç:", reply_markup=markup)

    elif call.data.startswith('age_'):
        age = call.data[4:]
        user_data[user_id] = {'age': age, 'answers': [], 'current_q': 0}
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, f"üëç –í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç: {age}. –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç!")
        time.sleep(1)
        send_question(call.message.chat.id, user_id)

    elif call.data == 'view_result':
        bot.answer_callback_query(call.id)
        if user_id in user_data and 'result' in user_data[user_id]:
            send_final_result(call.message.chat.id, user_data[user_id]['result'])
        else:
            bot.send_message(call.message.chat.id, "‚ö†Ô∏è –í—ã –µ—â—ë –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ç–µ—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç.")

    elif call.data.startswith('answer_'):
        answer_index = int(call.data.split('_')[1])
        if user_id in user_data:
            user_data[user_id]['answers'].append(answer_index)
            user_data[user_id]['current_q'] += 1
            bot.answer_callback_query(call.id)

            if user_data[user_id]['current_q'] < len(questions):
                time.sleep(1)
                send_question(call.message.chat.id, user_id)
            else:
                result_profile = analyze_answers(user_data[user_id]['answers'])
                user_data[user_id]['result'] = result_profile
                send_final_result(call.message.chat.id, result_profile)

    elif call.data == 'university_info':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—É–∑—É
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–π –≤—É–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É
        if user_id in user_data and 'result' in user_data[user_id]:
            profile = user_data[user_id]['result']
            # –ü–æ–∫–∞–∂–µ–º –∏–Ω—Ñ–æ –ø–æ –ø–µ—Ä–≤–æ–º—É –≤—É–∑—É –∏–∑ —Å–ø–∏—Å–∫–∞
            uni_name = universities[profile][0][0]
            info = university_info.get(uni_name, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—É–∑–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            bot.answer_callback_query(call.id)
            bot.send_message(call.message.chat.id, f"üè´ {uni_name}:\n{info}")
        else:
            bot.answer_callback_query(call.id)
            bot.send_message(call.message.chat.id, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—É–∑–∞—Ö.")

def send_question(chat_id, user_id):
    q_index = user_data[user_id]['current_q']
    question = questions[q_index]
    markup = types.InlineKeyboardMarkup(row_width=1)
    for i, option in enumerate(question['options']):
        btn = types.InlineKeyboardButton(option['text'], callback_data=f'answer_{i}')
        markup.add(btn)
    bot.send_message(chat_id, f"‚ùì –í–æ–ø—Ä–æ—Å {q_index + 1} –∏–∑ {len(questions)}:\n\n{question['text']}", reply_markup=markup)

def analyze_answers(answers):
    scores = [0, 0, 0]
    for q_index, ans_index in enumerate(answers):
        weights = questions[q_index]['options'][ans_index]['weights']
        for i in range(len(scores)):
            scores[i] += weights[i]
    max_score = max(scores)
    profile_index = scores.index(max_score)
    return profile_index

def send_final_result(chat_id, profile_index):
    profiles_desc = {
        0: "üõ† –í—ã —Å–∫–ª–æ–Ω–Ω—ã –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º.",
        1: "üìö –í—ã —Å–∫–ª–æ–Ω–Ω—ã –∫ –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º.",
        2: "ü§ù –í—ã —Å–∫–ª–æ–Ω–Ω—ã –∫ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º."
    }
    bot.send_message(chat_id, profiles_desc[profile_index])

    markup = types.InlineKeyboardMarkup(row_width=1)
    for uni, faculty in universities[profile_index]:
        btn = types.InlineKeyboardButton(f"{uni} - {faculty}", callback_data='university_info')
        markup.add(btn)
    bot.send_message(chat_id, "üéì –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –≤—É–∑—ã –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=markup)

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)
